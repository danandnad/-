y = 2000

if (y%4==0) or (y%400==0):
  if(y%100==0):
    print("평년입니다.")
  else:
    print("윤년입니다.")  #????? : 1600년이 400년으로 나누어 떨어지는 해라서 윤년으로 나와야하는데 100으로도 떨어져서 평년으로 나와
else:
  print("윤년이 아닙니다.")







#연습문제1
XA = input("자백을 했습니까?:")
XB = input("자백을 했습니까?:")

YA = 0
YB = 0

if XA == "네":
  XA = True
  if XB == "네":
    XB = True
else:
  XA = False
  XB = False

if XA == True:
  YA = 0
  YB = 10
  print("죄수 A는 {}년형이고 나머지 한 명이 {}년을 복역해야 한다.".format(YA, YB))
elif XB == True:
  YA = 5
  YB = 5
  print("죄수 B는 {}년형이고 나머지 한 명도 {}년을 복역해야 한다.".format(YB, YA))
else:
  YA = 1
  YB = 1
  print("죄수 A는 {}년형이고 나머지 한 명도 {}년을 복역해야 한다.".format(YA, YB))












def twotimes(x):
  y = 2 * x
  return y

twotimes(10)






def evenodd(x):
  y = x % 2
  if y != 0 :
    return "홀수"
  y == 0
  return "짝수" 

evenodd(4)






def moon(x):
  if (x%4==0) & (x%400==0):
    return "윤년입니다."
  else:
    return "평년입니다."

moon()











#연습문제2.6.2 (파이썬 함수)
평년일 때 1, 3, 5, 7, 8, 10, 12 월은 31일, 4, 6, 9, 11월은 30일, 2월은 28일이다. 
월을 나타내는 숫자를 입력하면 그 달의 날짜 수를 반환하는 함수 days1 를 만든다. 
사용 예는 다음과 같다.
days1(11) #11월의 날짜 수
>>30


#내가 한거
m = input("지금이 몇 월입니까? :")
n = 0

def moon(m):
  if (m == 1,3,5,7,8,10,12):
     n = 31
     return n 
  elif (m == 4,6,9,11):
     n = 30
     return n
  else:
    n = 28
    return n
  
print(n)  






#다른 사람이 한거


def days1(y, m):
  if y%4 != 0:
    if m == 1 or m ==3 or m == 5 or m == 7 or m ==8 or m ==10 or m ==12:
      return "평년이며 31일"
    elif m == 4 or m ==6 or m ==9 or m ==11:
      return "평년이며 30일"
    elif m == 2:
      return "평년이며 28일"
    else:
      return "윤년은 다른 일수를 가집니다."
      
days1(2004, 11)     












#<람다함수>
def f(x):
  return 2 * x
#서로 다른 방법이지만 람다함수를 사용하면 조금 더 편리하게 사용가능하다.

f = lambda x : 2 * x #람다함수 사용으로 변수이름을 먼저 지정해준 다음 출력변수에 대한 값을 계산한다.
f(2)








def num(a, b, c):
  x = a + b + c
  y = a^2 + b^2 + c^2
  if x >= y:
    diffsum = x - y
  elif x <= y:
    diffsum = y - x
  return diffsum
   
num(3, 4, 5)









z = 3

def f4(x):
    global z #global 키워드는 선언함으로써 지역밖에서 선언되었던 변수의 기존값을 없애고 지역변수에서 지정해줬던 변수로 전역변수를 적용해주는 키워드입니다.
    z = 99
    y = z * x
    print("y =", y)
    print("z =", z)
    return y









###
함수 바깥에 m 이라는 전역 변수를 만들고 그 값을 0으로 놓는다.
앞에서 만든 diffsum 함수를 고쳐서 diffsum 함수와 같은 값을 반환하지만 함수를 실행할 때 마다 
diffsum 함수에서 계산된 값이 원래 있던 m보다 크면 m을 계산된 값으로 바꾸는 함수 diffsum2 를 만든다.
###
def diffsum2(a, b, c):
  x = a + b + c
  y = a^2 + b^2 + c^2
  global m
  if x >= y:
    diffsum = x - y
  elif x <= y:
    diffsum = y - x
  return diffsum
  if diffsum > m :
    m = diffsum
diffsum2(2, 2, 3)  


















for i in range(1,10):
    if i <= 5:
        for j in range(5-i):
            print(" ",end="")
        for j in range(2*i-1):
            print("*",end="")
        print()
    else:
        for j in range(i-5):
            print(" ",end="")
        for j in range((10-i)*2-1):
            print("*",end="")
        print()
  


















for i in range(4):
    for j in range(4):
        print(i + j, end=" ")
    print()  #??????????????????















for i in range(6):
    n1 = i + 1
    for j in range(6):
        n2 = j + 1
        print(n1, n2)










#딕셔너리변수 = {자료이름1: 자료값1, 자료이름2: 자료값2, 자료이름3: 자료값3}






h = [1, 2, 3]
h1, h2, h3 = h
#이렇게 쉼표를 사용하여 복수 할당을 사용한다.
#단 복수 할당을 할 때는 값이 들어갈 변수의 개수와 리스트의 길이가 같아야 한다. 
#그렇지 않으면 오류가 발생한다.
print(h1)
print(h2)
print(h3)









s = []
a1 = [90, 85, 95, 80, 90, 100, 85, 75, 85, 80]
a2 = [95, 90, 90, 90, 95, 100, 90, 80, 95, 90]
for i in range(len(a1)):
    s.append(a1[i] + a2[i])
s

>>[185, 175, 185, 170, 185, 200, 175, 155, 180, 170]




#enumerate함수와 zip함수를 사용한 것. 
#enumerate 함수와 zip함수 차이 알아보기!!!!!!!!!!!!!!!!!!
#https://kevinitcoding.tistory.com/entry/%ED%8C%8C%EC%9D%B4%EC%8D%ACPython-enumerate%EC%99%80-zip%EC%97%90-%EB%8C%80%ED%95%9C-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC
s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
a1 = [90, 85, 95, 80, 90, 100, 85, 75, 85, 80]
a2 = [95, 90, 90, 90, 95, 100, 90, 80, 95, 90]
for i, (a1i, a2i) in enumerate(zip(a1, a2)):
    s[i] = a1i + a2i
s












X = [[85,  90,  20,  50,  60,  25,  30,  75,  40,  55],
     [70, 100,  70,  70,  55,  75,  55,  60,  40,  45],
     [25,  65,  15,  25,  20,   5,  60,  70,  35,  10],
     [80,  45,  80,  40,  75,  35,  80,  55,  70,  90],
     [35,  50,  75,  25,  35,  70,  65,  50,  70,  10]]




sum = 0
num = 0
for i in range(len(X)):
    for j in range(len(X[i])):
        num += 1
        sum += X[i][j]
sum / num
#sum / len(x)랑 왜 값이 다르지 ??????? 한번더 봐봐















#2.10chapter need to take a problems. 2.9도












#연습문제 2.10.3
x = [
  ["길동", 90],
  ["철수", 80],
  ["영수", 70],
  ["방자", 60],
]

ax = list(zip(*x))
print(ax)










x = {"a":10, "b":20}
len(x)

print(x["a"])

x["a"] = 30
print(x)

x["c"] = 40
print(x)

del x["b"]
print(x)

"a" in x
"d" in x


>>>
10
{'a': 30, 'b': 20}
{'a': 30, 'b': 20, 'c': 40}
{'a': 30, 'c': 40}
True
False







x.keys() #keys 메서드는 딕셔너리 자료의 키 목록을 리스트로 반환하므로 반복문에 이를 사용할 수도 있다.
for k in x.keys():
  print(k)



for v in x.values():
  #딕셔너리 자료의 키를 반복하려면 딕셔너리 자료의 값 목록을 리스트로 반환하는 values 메서드를 사용한다.
  print(v)



for k, v in x.items(): #딕셔너리 자료의 키와 값을 쌍으로 하여 반복하려면 items 메서드를 사용한다.
#for 다음의 카운터 변수를 다음과 같이 두 개 지정해야 한다. 첫번째 카운터 변수에는 키가, 두번째 카운터 변수에는 값이 들어가게 된다.
  print("key [%s] => value [%d]" % (k, v))










class Rectangle(object):

  def __init__(self, h, v):
    # __init__란 함수는 생성자(constructor)라고 한다.
    self.h = h
    self.v = v

  def area(self):
    return self.h * self.v

r = Rectangle(10, 20) 
#객체를 생성할 때는 클래스이름을 함수처럼 호출해야 하는데, 이때 실제로는 __init__로 정의된 생성자 함수가 호출된다. 
#생성자 함수 내부에서는 생성자를 호출할 때 넣은 입력 변수, 즉 인자의 값을 속성값으로 저장한다.
a = r.area()

print(a)








class Square(object):
  
  def __init__(self, b, h):
    self.b = b
    self.h = h

  def area(self):
    return self.b * self.h / 2

s = Square(10, 4)
a = s.area()

print(a)





















class cube(object):

  def __init__(this, a, d, h):
    this.a = a
    this.d = d
    this.h = h

  def volume(this):
    return (this.a * this.h * this.d)
  
  def surface(this):
    return (this.a * this.d) * 6
  
c = cube(5, 5, 5)
v = c.volume()
s = c.surface()

print(v)
print(s)











class Character(object):

  def __init__(self):
    self.life = 1000
  def attacked(self):
    self.life -= 10
    print("공격받음! 생명력 =", self.life)


a = Character()
b = Character()
c = Character()

a.life, b.life, c.life
#(1000, 1000, 1000)
a.attacked()
#(990, 1000, 1000)










class 자식클래스이름(부모클래스이름):

    def __init__(self, 속성값1, 속성값2):
        super(자식클래스이름, self).__init__()
        자식 클래스의 초기화 코드

#사실 우리가 지금까지 쓰던 클래스 정의를 살펴보면 object라는 부모 클래스에서 상속받는 것이었다.!!!!!!!!!!!!!!!!!!!!!!!!!!!


#이 코드에서 super(자식클래스이름, self).__init()__ 부분은 부모 클래스의 초기화 생성자를 호출하는 부분이다. 
#예를 들어 Warrior 라는 클래스에서 부모 클래스인 Character 클래스의 생성자를 호출하면 life라는 속성값을 초기화하므로 
#자식 클래스에서는 이 속성값을 초기화해줄 필요가 없다.










https://notebook.community/zzsza/Datascience_School/03.%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/06.%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EA%B8%B0%EC%B4%88%202
https://hangjastar.tistory.com/264
https://wikidocs.net/book/5011





